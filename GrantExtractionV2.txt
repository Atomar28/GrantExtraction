import asyncio
import csv
import logging
import os
import sys
from playwright.async_api import async_playwright

class NortheasternGrantExtractor:
    def __init__(self, url="https://npc.collegeboard.org/app/northeastern/start"):
        self.url = url
        logging.basicConfig(level=logging.INFO, 
                            format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)

    async def extract_grant_details(self, income):
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=False)
            context = await browser.new_context()
            page = await context.new_page()

            try:
                # Navigate to the form
                await page.goto(self.url, wait_until='networkidle')
                self.logger.info(f"Processing income: {income}")

                # Getting Started Page
                await self._fill_getting_started_page(page)

                # Dependency Status Page
                await self._fill_dependency_status_page(page)

                # Parent Household Page
                await self._fill_parent_household_page(page)

                # Parent Income Page (with dynamic income)
                await self._fill_parent_income_page(page, income)

                # Parent Assets Page
                await self._fill_parent_assets_page(page)

                # Student Finances Page
                await self._fill_student_finances_page(page)

                # Northeastern Questions Page
                await self._fill_northeastern_questions_page(page)

                # Extract results
                result = await self._extract_results(page)
                
                await browser.close()
                return result

            except Exception as e:
                self.logger.error(f"Error processing income {income}: {e}")
                await browser.close()
                return None

    async def _fill_getting_started_page(self, page):
        await page.fill("input[aria-label='The student's first name (optional)']", "John")
        await page.select_option("select[aria-label='The Student's state of legal residence']", "Massachusetts")
        await page.select_option("select[aria-label='Who will be answering the questions?']", "The Student")
        await page.click("text=Continue")
        await page.wait_for_load_state('networkidle')

    async def _fill_dependency_status_page(self, page):
        await page.select_option("select[aria-label='Your year of birth']", "2002")
        await page.select_option("select[aria-label='Your marital status']", "Never married")
        await page.locator("text=No").first.click()  # Dependent children
        await page.locator("text=No").nth(1).click()  # Orphan or ward
        await page.click("text=Next")
        await page.wait_for_load_state('networkidle')

    async def _fill_parent_household_page(self, page):
        await page.select_option("select[aria-label='Your parents' marital status']", "Married")
        await page.select_option("select[aria-label='Your older parent's year of birth']", "1975")
        await page.select_option("select[aria-label='Your parents' state of legal residence']", "Massachusetts")
        await page.select_option("select[aria-label='Number of siblings in your parents' household']", "2")
        await page.click("text=Next")
        await page.wait_for_load_state('networkidle')

    async def _fill_parent_income_page(self, page, income):
        await page.select_option("select[aria-label='Type of Federal income tax form your parents filed']", "1040")
        await page.fill("input[aria-label='Your parents' combined adjusted gross income (AGI)']", str(income))
        await page.fill("input[aria-label='Your parents' federal tax payment']", "5000")
        await page.fill("input[aria-label='Work income from one parent']", str(income // 2))
        await page.click("text=Next")
        await page.wait_for_load_state('networkidle')

    async def _fill_parent_assets_page(self, page):
        await page.fill("input[aria-label='Current amount in cash, savings, and checking accounts']", "20000")
        await page.locator("text=No").first.click()  # Own a home
        await page.fill("input[aria-label='Current value of your parents' investments']", "15000")
        await page.locator("text=No").nth(1).click()  # Own a business
        await page.click("text=Next")
        await page.wait_for_load_state('networkidle')

    async def _fill_student_finances_page(self, page):
        await page.fill("input[aria-label='Combined wages, salaries, and tips from your work']", "5000")
        await page.fill("input[aria-label='Your adjusted gross income (AGI)']", "4500")
        await page.click("text=Next")
        await page.wait_for_load_state('networkidle')

    async def _fill_northeastern_questions_page(self, page):
        await page.select_option("select[aria-label='Your housing status in college']", "On campus")
        await page.click("text=Calculate")
        await page.wait_for_load_state('networkidle')

    async def _extract_results(self, page):
        # Attempt to extract key financial details
        try:
            # Use page evaluation to extract text content
            results = await page.evaluate('''() => {
                const resultRows = document.querySelectorAll('table tr');
                return Array.from(resultRows).map(row => {
                    const cells = row.querySelectorAll('td');
                    return cells.length > 0 ? Array.from(cells).map(cell => cell.textContent.trim()) : null;
                }).filter(row => row !== null);
            }''')
            
            return results
        except Exception as e:
            self.logger.error(f"Error extracting results: {e}")
            return None

async def main():
    # Determine the directory of the script
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Construct full path to income_values.csv
    income_csv_path = os.path.join(script_dir, 'income_values.csv')
    output_csv_path = os.path.join(script_dir, 'northeastern_grant_results.csv')

    # Read income values from the CSV
    try:
        with open(income_csv_path, 'r') as f:
            # Remove brackets and split
            income_values = [int(val.strip().replace(',', '')) for val in f.read().strip('[]').split(',')]
    except FileNotFoundError:
        print(f"Error: Income values CSV not found at {income_csv_path}")
        print("Current script directory:", script_dir)
        print("Files in directory:", os.listdir(script_dir))
        sys.exit(1)

    # Initialize extractor
    extractor = NortheasternGrantExtractor()

    # Prepare output CSV
    with open(output_csv_path, 'w', newline='') as csvfile:
        csv_writer = csv.writer(csvfile)
        
        # Write header
        header = [
            'Tuition & Fees', 'Room & Board', 'Books & Supplies', 
            'Transportation', 'Personal Expenses', 
            'Estimated Federal Pell Grant', 'State Grant', 
            'Northeastern University Award', 'SEOG', 
            'Parent Contribution', 'Student Contribution', 'AGI'
        ]
        csv_writer.writerow(header)

        # Process each income value
        for income in income_values:
            try:
                results = await extractor.extract_grant_details(income)
                if results:
                    for result_row in results:
                        csv_writer.writerow(result_row)
                    print(f"Processed income: {income}")
            except Exception as e:
                print(f"Error processing income {income}: {e}")

if __name__ == "__main__":
    asyncio.run(main())